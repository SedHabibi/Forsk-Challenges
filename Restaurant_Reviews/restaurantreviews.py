# -*- coding: utf-8 -*-
"""RestaurantReviews.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12TGRmOESSWzuVQrxF03kDPFScIQIbAkn

Mounting the drive
"""

#Mounting gdrive.
from google.colab import drive
drive.mount('/content/gdrive')

#Getting the necessary file from gdrive.
path = '/content/gdrive/MyDrive/Restaurant_Reviews.tsv'

#Importing libaries.
import keras
import numpy as np
import pandas as pd
from keras.utils import np_utils
from keras.models import Sequential
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from keras.layers.core import Dense, Dropout, Activation
from sklearn.feature_extraction.text import TfidfVectorizer

"""Data pre-processing

"""

#Reading the data.
data = pd.read_csv(path, sep = '\t')
print(data.shape,'\n', data.columns.tolist(), '\n', data.isnull().any(axis = 0),'\n', data.head(5))

#Declaring features and labels.
features = data.iloc[:,0].values
labels = data.iloc[:,-1]

#Splitting the data.
x_train, x_test, y_train, y_test = train_test_split(features, labels, random_state = 42, test_size = 0.5)

#Vectorizing the data.
vect = TfidfVectorizer(min_df = 5)
x_train_vect = vect.fit_transform(x_train).todense()

"""Hidden Layers -> 700, 500, 100

"""

#Building ANN model.
model = Sequential()

#First Hidden Layer.
model.add(Dense(700,input_shape= (198,)))
model.add(Activation('relu'))
model.add(Dropout(0.5))

#Second Hidden Layer.
model.add(Dense(500))
model.add(Activation('relu'))
model.add(Dropout(0.5))

#Third Hidden Layer.
model.add(Dense(100))
model.add(Activation('relu'))
model.add(Dropout(0.5))

#Output Layer.
model.add(Dense(1))
model.add(Activation('sigmoid'))

#Compiling the model.
model.compile(loss = 'binary_crossentropy', optimizer = 'adam')

#Fitting our data.
model.fit(x_train_vect, y_train, batch_size = 32, epochs = 10)

#Predicting the data.
y_train_pred = model.predict(x_train_vect,batch_size=64)
y_test_pred = model.predict(vect.transform(x_test).todense(),batch_size=64)

print('Training accuracy ->', accuracy_score(y_train, y_train_pred))
print('Testing accuracy ->', accuracy_score(y_test,y_test_pred))