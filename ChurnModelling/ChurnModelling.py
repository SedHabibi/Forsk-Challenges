# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HDlZUr8HGDGBhx7nuSc2YKky4hgnRm5W
"""

#importing libraries
import keras
import numpy as np
import pandas as pd
from keras.layers import Dense
import matplotlib.pyplot as plt
from keras.models import Sequential
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

#Reading the data and getting additional information
path = '/content/drive/MyDrive/Churn_Modelling.csv'
data = pd.read_csv(path)
print(data.shape, data.head(5), data.columns.tolist())

#Getting our features and labels.
features = data.iloc[:, 3:13].values
labels = data.iloc[:,13].values
features[0:10,:]

#Encoding and transforming the data.
ct = ColumnTransformer([('encoder', OneHotEncoder(), [1,2])], remainder = 'passthrough')
features = np.array(ct.fit_transform(features), dtype = np.float32)
#Dropping dummy variable column.
features = features[:, 1:]
features[0]
#Dropping gender column.
features = features[:, [0,1,3,4,5,6,7,8,9,10,11]]
print(features.shape)

#Splitting the data.
features_train, features_test, labels_train, labels_test = train_test_split(features, labels, test_size = 0.2, random_state = 0)
features_train[0]

#Scaling the data.
sc = StandardScaler()
features_train = sc.fit_transform(features_train)
features_test = sc.transform(features_test)

#DL Model.
classifier = Sequential()
classifier.add(Dense(units = 6, kernel_initializer = 'uniform', activation = 'relu', input_dim = 11))
classifier.add(Dense(units = 6, kernel_initializer = 'uniform', activation = 'relu'))
classifier.add(Dense(units = 1, kernel_initializer = 'uniform', activation='sigmoid'))
classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])
classifier.fit(features_train, labels_train, batch_size = 10, epochs = 10)
labels_pred = classifier.predict(features_test)
len(labels_pred)
list(zip(labels_test, labels_pred))

labels_pred

cm = confusion_matrix(labels_test, labels_pred)
cm